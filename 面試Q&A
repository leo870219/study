什麼是原型鍊（prototype chain）?
由於每一個物件都有prototype，而__proto__用來返回所繼承的物件，這樣一個牽一個、層層相依的從屬關係，就叫做原型鏈（Prototype Chain）

什麼是作用域 (scope)？
變數在程式中可以被存取的範圍，分為區域及全域

什麼是 hoisting？
JS程式執行前會做一次即時編譯，處理所有作用域中的宣告，開始執行程式時才會賦值

RESTful API風格的網址設計強調從路由結構就能看出要對什麼資料、進行什麼操作。

網路運作原理:
網路分為客戶端跟伺服器端，當客戶端輸入網址時，會先找尋該網址的DNS，找到後透過TCP/IP連線向伺服器丟出http請求，
如伺服器端許可，將丟回一小串封包給客戶端，瀏覽器再將這些封包組合成完整的網站，並渲染出頁面

甚麼是閉包?
閉包是個捕捉了外部函式變數（或使之繼續存活）的函式，它包含了一個函式，以及函式被建立時所在的環境，
主要可用來儲存數據、防止全域汙染、創建函式工廠、私有化方法

甚麼是物件導向?有何特性?解決了甚麼問題?
物件導向程式設計中的每一個物件都能夠接受資料、處理資料並將資料傳送給其他物件
三大特性，封裝、繼承、多型
提升程式的靈活性、重用性及可維護性

https://medium.com/starbugs/%E9%9D%A2%E8%A9%A6-%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%AB%E4%B8%80%E5%AE%9A%E8%A6%81%E6%9C%83%E7%9A%84-js-%E8%A7%80%E5%BF%B5%E9%A1%8C-%E4%B8%AD%E8%8B%B1%E5%B0%8D%E7%85%A7%E4%B9%8B%E4%B8%8A%E7%AF%87-3b0a3feda14f
面試觀念題(一)

https://blog.techbridge.cc/2018/11/10/javascript-hoisting/
hosting詳解，let、const的TDZ解說

https://medium.com/@weihanglo/answers-to-chernys-interview-questions-ed5b35dce930
面試觀念題

this
bind會回傳一個綁定 this 過後的 function ，也可接收多個參數
call、apply會直接執行並返回結果，兩者差別在於傳入參數的格式，call用逗號隔開，apply用陣列。

RESTful API
主要優點:讓人好理解、開發擴充方便
Client-Server(主從式架構)
只要中間的 API 沒有變，Server 和 Client 可以個別開發，相互不受影響
Stateless(無狀態)
從 Client 到 Server 的所有請求，皆需包含『 用於理解此請求 』的 所有 相關信息，不得利用任何儲存在 Server 的上下文，每一個 Request 必須包含所有需要的資訊，而不需依賴其他 Request 的狀態。
Cacheable(可快取)
可實作快取，且快取機制可以在 Client 或 Server 中實作。
Uniform Interface(統一介面)
介面一致，API邏輯一致
Layered System(分層系統)
可分層的系統架構，通過限制元件的行為（即每個元件只能「看到」與其互動的緊鄰層），將架構分解為若干等級的層。
EX: 在服務器A上部署API，並在服務器B上存儲數據並對服務器C中的請求進行身份驗證。 客戶端通常無法判斷它是直接連接到終端服務器，還是沿途的中介。
Code-On-Demand(按需程式碼)
支援通過下載並執行一些程式碼（例如Java Applet、Flash或JavaScript），對用戶端的功能進行擴充。

關於這些事件的傳遞順序，只要記住兩個原則就好：
先捕獲，再冒泡
當事件傳到 target 本身，沒有分捕獲跟冒泡
DOM 的事件傳遞機制：捕獲與冒泡
事件捕獲:會先從根節點開始往下傳遞到該事件位置
事件冒泡:從該事件位置向根元素傳遞
e.stopPropagation() 就是阻止事件的傳遞

Git Flow
Master:穩定版分支/Develop:開發版分支/Feature:新增功能分支/Hotfix:修復版分支/Release:上線前測試版分支
有五大分支，分別為
1.Master:用來放穩定、隨時可上線的版本，只能透過別的分支合併而來，不會直接commit到這個分支，通常merge會打上版本號。
2.Develop:所有開發的基礎分之，要開發任何新功能都是從這支分支切出去到feature分支，功能完成後會將feature分支合併回來。
3.Feature:當要開始新增功能的時候，就是使用 Feature 分支的時候了。Feature 分支都是從 Develop 分支來的，完成之後會再併回 Develop 分支。
4.Hotfix:當線上產品發生緊急問題的時候，會從 Master 分支開一個 Hotfix 分支出來進行修復，Hotfix 分支修復完成之後，
會合併回 Master 分支，也同時會合併一份到 Develop 分支。
為什麼要合併回 Develop 分支？如果不這麼做，等到時候 Develop 分支完成並且合併回 Master 分支的時候，那個問題就又再次出現了。
5.Release:當認為 Develop 分支夠成熟了，就可以把 Develop 分支合併到 Release 分支，在這邊進行算是上線前的最後測試。測試完成後，
Release 分支將會同時合併到 Master 以及 Develop 這兩個分支上。Master 分支是上線版本，而合併回 Develop 分支的目的，是因為可能在
Release 分支上還會測到並修正一些問題，所以需要跟 Develop 分支同步，免得之後的版本又再度出現同樣的問題。